{"version":3,"sources":["Components/BreedSelector.js","Components/DogImage.js","App.js","serviceWorker.js","index.js"],"names":["DogImage","props","image","react_default","a","createElement","className","style","height","screenHeight","src","alt","options","_i","_breeds","length","b","upperB","charAt","toUpperCase","slice","push","key","value","BreedSelector","onChange","changeBreed","currentBreed","App","state","breed","e","target","getDog","_callee","breedToUpperCase","API_URL","data","obj","msg","regenerator_default","wrap","_context","prev","next","includes","i","indexOf","secondName","substring","preventDefault","_this","setState","refs","dogButton","disabled","concat","fetch","sent","json","status","message","lastIndexOf","img","displayBreed","stop","_this2","this","document","addEventListener","which","click","action","Components_BreedSelector","ref","onClick","Components_DogImage","window","innerHeight","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.261689a3.chunk.js","sourcesContent":["import React from 'react';\n\nconst breeds = [\"random\", \"affenpinscher\",\"african\",\"airedale\",\"akita\",\"appenzeller\",\"basenji\",\"beagle\",\"bluetick\",\"borzoi\",\"bouvier\",\"boxer\",\"brabancon\",\"briard\",\"bulldog\",\"bullterrier\",\"cairn\",\"cattledog\",\"chihuahua\",\"chow\",\"clumber\",\"cockapoo\",\"collie\",\"coonhound\",\"corgi\",\"cotondetulear\",\"dachshund\",\"dalmatian\",\"dane\",\"deerhound\",\"dhole\",\"dingo\",\"doberman\",\"elkhound\",\"entlebucher\",\"eskimo\",\"frise\",\"germanshepherd\",\"greyhound\",\"groenendael\",\"hound\",\"husky\",\"keeshond\",\"kelpie\",\"komondor\",\"kuvasz\",\"labrador\",\"leonberg\",\"lhasa\",\"malamute\",\"malinois\",\"maltese\",\"mastiff\",\"mexicanhairless\",\"mix\",\"mountain\",\"newfoundland\",\"otterhound\",\"papillon\",\"pekinese\",\"pembroke\",\"pinscher\",\"pointer\",\"pomeranian\",\"poodle\",\"pug\",\"puggle\",\"pyrenees\",\"redbone\",\"retriever\",\"ridgeback\",\"rottweiler\",\"saluki\",\"samoyed\",\"schipperke\",\"schnauzer\",\"setter\",\"sheepdog\",\"shiba\",\"shihtzu\",\"spaniel\",\"springer\",\"stbernard\",\"terrier\",\"vizsla\",\"weimaraner\",\"whippet\",\"wolfhound\"];\nconst options = [];\nfor (let b of breeds){\n    //Make the breed's name uppercase\n    let upperB = b.charAt(0).toUpperCase() + b.slice(1);\n    options.push(<option key={b} value={b}>{upperB}</option>);\n}\n\n\n\nconst BreedSelector = props => {\n\n    return (\n        <select onChange={props.changeBreed} className=\"custom-select mb-3\">\n            {options}\n        </select>\n    );\n};\n\nexport default BreedSelector;","import React from 'react';\n\nconst DogImage = props => {\n\n    return (\n        props.image\n        ? \n        <div className=\"text-center mt-5\" style={{'height': props.screenHeight * 0.70}}>\n            <img className=\"img-fluid img-thumbnail rounded\" src={props.image} alt=\"Dog\"/>\n        </div>\n        :\n        null\n    );\n};\n\nexport default DogImage;","import React from 'react';\nimport './App.css';\nimport DogImage from './Components/DogImage';\nimport BreedSelector from './Components/BreedSelector';\n\nlet currentBreed = 'random';\n\n\nclass App extends React.Component{\n\n    state = {\n        breed: currentBreed,\n    };\n\n    changeBreed = (e) => {\n        currentBreed = e.target.value;\n    }\n\n    getDog = async(e) => {\n\n        //Transforms the breed's name to upper case\n        function breedToUpperCase(breed){\n            breed = breed.charAt(0).toUpperCase() + breed.slice(1);\n            if (breed.includes('-')){\n                let i = breed.indexOf('-');\n                let secondName = breed.substring(i+1);\n                secondName = secondName.charAt(0).toUpperCase() + secondName.slice(1);\n                breed = breed.substring(0, i) + ' ' + secondName;\n            }\n            return breed;\n        }\n        e.preventDefault();\n        this.setState({breed: currentBreed});\n        this.refs.dogButton.disabled = true;\n        \n        const API_URL = currentBreed === 'random' ? 'https://dog.ceo/api/breeds/image/random' : `https://dog.ceo/api/breed/${currentBreed}/images/random`;\n        const data = await fetch(API_URL);\n        const obj = await data.json();\n        if (obj.status === 'success'){\n            let msg = obj.message;\n            let b = msg.substring(msg.indexOf('breeds/') + 7, msg.lastIndexOf('/'));\n            this.setState({img: msg, displayBreed: breedToUpperCase(b)});\n        }\n\n        else{\n            this.setState({img: 'https://cdn-images-1.medium.com/max/1200/1*wUOrpv-selJOytCkslSIhg.png'});\n        }\n        this.refs.dogButton.disabled = false;\n    }\n\n    render(){\n\n        document.addEventListener('keydown', e => {\n            \n            if (e.which === 13 || e.which === 32){\n                this.refs.dogButton.click();\n            }\n        });\n\n        return(\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <h1 className=\"display-2 text-center\">Fetch!</h1>\n                    </div>\n                </div>\n                <div className=\"row\">\n\n                    {/* Options Column */}\n                    <form className=\"col-3\" action=\"submit\">\n                        <BreedSelector changeBreed={this.changeBreed}></BreedSelector>\n                        <button ref=\"dogButton\" className=\"btn btn-primary p-5 mb-5\" onClick={this.getDog}>Click To Dog</button>\n                        <div className=\"border d-flex justify-content-center display-container\">\n                            <h2 className=\"mb-4 mt-5 text-center justify-center\">{this.state.displayBreed}</h2>\n                        </div>\n                    </form>\n\n                    {/* Image Column */}\n                    <div className=\"col-9 d-flex justify-content-center overflow-hidden\">\n                        <DogImage image={this.state.img} screenHeight={window.innerHeight}></DogImage>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}